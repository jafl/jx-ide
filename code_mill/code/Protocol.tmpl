#ifndef _T_Protocol
#define _T_Protocol

/******************************************************************************
 Protocol.cpp

	Broadcasts whenever data arrives.

	BASE CLASS = ACE_Svc_Handler, virtual JBroadcaster

	Copyright (C) 1998 by John Lindal.

 ******************************************************************************/

#include <Protocol.h>
#include <jx-af/jcore/jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
Protocol<ACE_PEER_STREAM_2>::Protocol()
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	ProtocolX();
}

template <ACE_PEER_STREAM_1>
Protocol<ACE_PEER_STREAM_2>::Protocol
	(
	const ACE_HANDLE fd
	)
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	ProtocolX();

	set_handle(fd);
	open(nullptr);
}

// private

template <ACE_PEER_STREAM_1>
void
Protocol<ACE_PEER_STREAM_2>::ProtocolX()
{
	itsBufferSize        = ProtocolT::kDefaultBufferSize;
	itsBuffer            = jnew JCharacter [ itsBufferSize ];
	itsInHandleInputFlag = false;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
Protocol<ACE_PEER_STREAM_2>::~Protocol()
{
	jdelete [] itsBuffer;
}

/******************************************************************************
 Read

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
Protocol<ACE_PEER_STREAM_2>::Read
	(
	JString* buffer
	)
{
	assert( buffer != nullptr );
	*buffer = itsData;
	itsData.Clear();
}

/******************************************************************************
 Write

	Stores the next complete line in *line and removes it from the queue.
	Returns false if no complete lines are available.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
Protocol<ACE_PEER_STREAM_2>::Write
	(
	const JCharacter* data
	)
{
	const JSize dataLen = strlen(data);

	iovec buffer[2];
	buffer[0].iov_base = const_cast<char*>(data);
	buffer[0].iov_len  = dataLen;

	JSize count = 1;
	if (data [ dataLen-1 ] != '\n')
	{
		count              = 2;
		buffer[1].iov_base = const_cast<char*>("\n");
		buffer[1].iov_len  = 1;
	}

	ACE::writev_n(get_handle(), buffer, count);
}

/******************************************************************************
 handle_input

	This is called when we receive data.  It is also safe for anybody else
	to call it.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
Protocol<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	// protect against recursive calls

	if (itsInHandleInputFlag)
	{
		return 0;
	}
	itsInHandleInputFlag = true;

	// read newly received data

	const ssize_t count = (peer()).recv(itsBuffer, itsBufferSize);
	if (count > 0)
	{
		itsData.Append(itsBuffer, count);
		Broadcast(ProtocolT::ReadReady());
	}

	itsInHandleInputFlag = false;
	return 0;
}

#endif
