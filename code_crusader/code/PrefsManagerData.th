/******************************************************************************
 PrefsManagerData.th

	Use this file to instantiate code for PrefsManager data sets

	To use this file:

		#define DataType      ____
		#define ListVar       ____
		#define CreateListFn  ____
		#define CompareNameFn ____
		#define MainDataID    ____
		#define EmptyDataID   ____
		#define FirstDataID   ____
		#define FindIDFn      ____
		#define FTStructIDVar ____
		#define EditDataFn    ____
		#define EditDataArg   ____
		#define EditDataSel   ____
		#define DialogClass   ____
		#define ExtractDataFn ____
		#define CopyConstr    ____
		#define Destr         ____
		#include "PrefsManagerData.th"
		#undef DataType
		#undef ListVar
		#undef CreateListFn
		#undef CompareNameFn
		#undef MainDataID
		#undef EmptyDataID
		#undef FirstDataID
		#undef FindIDFn
		#undef FTStructIDVar
		#undef EditDataFn
		#undef EditDataArg
		#undef EditDataSel
		#undef DialogClass
		#undef ExtractDataFn
		#undef CopyConstr
		#undef Destr

	Copyright Â© 1998 by John Lindal.

 ******************************************************************************/

/******************************************************************************
 CreateListFn

 ******************************************************************************/

JArray<PrefsManager::DataType>*
PrefsManager::CreateListFn()
{
	JArray<DataType>* list = jnew JArray<DataType>;
	list->SetSortOrder(JListT::kSortAscending);
	list->SetCompareFunction(CompareNameFn);
	return list;
}

/******************************************************************************
 CompareNameFn (static private)

 ******************************************************************************/

std::weak_ordering
PrefsManager::CompareNameFn
	(
	const DataType& i1,
	const DataType& i2
	)
{
	return JCompareStringsCaseInsensitive(i1.name, i2.name);
}

/******************************************************************************
 CreateAndReadData (private)

	Reads in the data sets and deletes the pref data.

 ******************************************************************************/

void
PrefsManager::CreateAndReadData
	(
	JArray<DataType>**	list,
	const JFileVersion	vers
	)
{
	*list = CreateListFn();

	std::string listData;
	bool ok = GetData(MainDataID, &listData);
	assert( ok );
	std::istringstream listStream(listData);

	JSize count;
	listStream >> count;

	for (JIndex i=1; i<=count; i++)
	{
		DataType info;

		info.name = jnew JString;
		listStream >> info.id >> *info.name;

		std::string data;
		const bool ok = GetData(info.id, &data);
		assert( ok );
		RemoveData(info.id);
		std::istringstream input(data);

		info.CreateAndRead(input, vers);

		(**list).AppendItem(info);
	}

	RemoveData(MainDataID);		// delete it since it might be an old version (see below)
}

/******************************************************************************
 WriteData

	Deletes the old data sets and writes out the new data sets.

 ******************************************************************************/

void
PrefsManager::WriteData
	(
	const JArray<DataType>& list
	)
{
	std::string listData;
	if (GetData(MainDataID, &listData))		// if it exists, it's our current version (see above)
	{
		std::istringstream listStream(listData);

		JSize count;
		listStream >> count;

		JIndex id;
		JString name;
		for (JIndex i=1; i<=count; i++)
		{
			listStream >> id >> name;
			RemoveData(id);
		}
	}

	std::ostringstream listStream;

	const JSize count = list.GetItemCount();
	listStream << count;

	for (JIndex i=1; i<=count; i++)
	{
		DataType info = list.GetItem(i);
		listStream << ' ' << info.id << ' ' << *info.name;

		std::ostringstream data;
		info.Write(data);
		SetData(info.id, data);
	}

	SetData(MainDataID, listStream);
}

/******************************************************************************
 EditDataFn

 ******************************************************************************/

void
PrefsManager::EditDataFn
	(
	EditDataArg* initialSelection
	)
{
	JArray<DataType>* list = CreateListFn();
	JIndex firstUnusedID   = FirstDataID;
	JIndex initialIndex    = 1;

	const JSize count = ListVar->GetItemCount();
	for (JIndex i=1; i<=count; i++)
	{
		const DataType origInfo = ListVar->GetItem(i);

		DataType newInfo(origInfo.id, jnew JString(*origInfo.name), CopyConstr);
		list->AppendItem(newInfo);

		if (origInfo.id >= firstUnusedID)
		{
			firstUnusedID = origInfo.id + 1;
		}

		if (origInfo.EditDataSel == initialSelection)
		{
			initialIndex = i;
		}
	}

	auto* dlog = jnew DialogClass(list, initialIndex, firstUnusedID);
	if (dlog->DoDialog())
	{
		JIndex firstNewID, lastNewID;
		JArray<DataType>* newList =
			dlog->ExtractDataFn(&firstNewID, &lastNewID);

		const JSize origCount = ListVar->GetItemCount();
		const JSize ftCount   = itsFileTypeList->GetItemCount();

		// throw out old objects and update file type->data links

		for (JIndex i=1; i<=origCount; i++)
		{
			DataType info = ListVar->GetItem(i);
			jdelete info.name;
			Destr;

			JIndex k;
			if (!FindIDFn(*newList, info.id, &k))
			{
				for (JIndex j=1; j<=ftCount; j++)
				{
					FileTypeInfo ftInfo = itsFileTypeList->GetItem(j);
					if (ftInfo.FTStructIDVar == info.id)
					{
						ftInfo.FTStructIDVar = EmptyDataID;
						itsFileTypeList->SetItem(j, ftInfo);
					}
				}
			}
		}

		// replace list with the new one

		jdelete ListVar;
		ListVar = newList;
		ListVar->Sort();

		// compact to fill in unused id's

		for (JIndex id=lastNewID; id>=firstNewID; id--)
		{
			JIndex index;
			const bool found = FindIDFn(*ListVar, id, &index);
			assert( found );

			bool foundEmptySlot = false;
			for (JIndex i=FirstDataID; i<firstNewID; i++)
			{
				JIndex j;
				if (!FindIDFn(*ListVar, i, &j))
				{
					DataType info = ListVar->GetItem(index);
					info.id       = i;
					ListVar->SetItem(index, info);

					foundEmptySlot = true;
					break;
				}
			}

			if (!foundEmptySlot)
			{
				break;
			}
		}

		// update open text documents in case a data set was deleted

		Broadcast(FileTypesChanged());
	}
}
