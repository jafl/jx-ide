/******************************************************************************
 GDBAnalyzeCoreCmd.cpp

	BASE CLASS = Command

	Copyright (C) 2002 by John Lindal.

 ******************************************************************************/

#include "GDBAnalyzeCoreCmd.h"
#include "globals.h"
#include <jx-af/jcore/JStringIterator.h>
#include <jx-af/jcore/JRegex.h>
#include <jx-af/jcore/jFileUtil.h>
#include <jx-af/jcore/jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

gdb::AnalyzeCoreCmd::AnalyzeCoreCmd
	(
	const JString& cmd
	)
	:
	Command(cmd, true, false)
{
}

/******************************************************************************
 Destructor

 ******************************************************************************/

gdb::AnalyzeCoreCmd::~AnalyzeCoreCmd()
{
}

/******************************************************************************
 HandleSuccess (virtual protected)

 ******************************************************************************/

static const JRegex programNamePattern = "Core was generated by `([^\n]+)'";

void
gdb::AnalyzeCoreCmd::HandleSuccess
	(
	const JString& data
	)
{
	Link* link = GetLink();

	JString programName;

	JStringIterator iter(data);
	if (iter.Next(programNamePattern))
	{
		programName = iter.GetLastMatch().GetSubstring(1);
		programName.TrimWhitespace();
	}
	else
	{
		Link::Log("GDBAnalyzeCoreCmd failed to match");
	}
	iter.Invalidate();

	JString coreFullName;
	if (!programName.IsEmpty() && link->GetCore(&coreFullName))
	{
		JString programFullName = programName;
		JString path, coreName;
		if (JIsRelativePath(programFullName))
		{
			JSplitPathAndName(coreFullName, &path, &coreName);
			programFullName = JCombinePathAndName(path, programFullName);
		}

		bool found = false;
		JStringIterator iter(&programFullName, kJIteratorStartAtEnd);
		while (true)
		{
			if (JFileExecutable(programFullName))
			{
				found = true;
				break;
			}

			// try stripping off last word

			if (!iter.Prev(" "))
			{
				break;
			}
			iter.RemoveAllNext();
		}
		iter.Invalidate();

		// if all else fails, ask user

		if (!found)
		{
			const JUtf8Byte* map[] =
			{
				"name", programName.GetBytes()
			};
			const JString instr = JGetString("FindProgram::GDBAnalyzeCoreCmd", map, sizeof(map));
			found = JGetChooseSaveFile()->ChooseFile(JGetString("Prompt::GDBAnalyzeCoreCmd"),
													 instr, &programFullName);
		}

		// must load core after program so shared libs get loaded
		// and source file gets displayed

		if (found)
		{
			link->SetProgram(programFullName);
			link->SetCore(coreFullName);
		}
	}
}
